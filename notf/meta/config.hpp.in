// This file is auto-generated by CMake at configuration time from notf/meta/config.hpp.in
#pragma once

// compiler related ================================================================================================= //

/// Operating System (as determined by CMake)
#cmakedefine NOTF_LINUX
#cmakedefine NOTF_WINDOWS
#cmakedefine NOTF_MACINTOSH

/// Compiler used (as determined by CMake).
#cmakedefine NOTF_CLANG
#cmakedefine NOTF_GCC
#cmakedefine NOTF_MSVC

/// Build type.
#cmakedefine NOTF_DEBUG
#cmakedefine NOTF_RELEASE

/// Compiler features.
#cmakedefine NOTF_COMPILER_HAS_DECLVAL

// TODO: instead of having a file full of #defines, put them into the CMake file
//       this way they are defined everywhere, even if you haven't included the meta/config file yet

// notf namespace =================================================================================================== //

/// Opens the notf namespace.
#define NOTF_OPEN_NAMESPACE namespace @NOTF_NAMESPACE_NAME@ {

/// For visual balance with NOTF_OPEN_NAMESPACE.
#define NOTF_CLOSE_NAMESPACE }

/// Use the notf namespace.
#define NOTF_USING_NAMESPACE using namespace @NOTF_NAMESPACE_NAME@

// notf::literals namespace ========================================================================================= //

/// Opens the notf::literals namespace.
#define NOTF_OPEN_LITERALS_NAMESPACE inline namespace @NOTF_LITERALS_NAMESPACE_NAME@ {

/// For visual balance with NOTF_OPEN_LITERALS_NAMESPACE.
#define NOTF_CLOSE_LITERALS_NAMESPACE }

/// Use the notf::literals namespace.
#define NOTF_USING_LITERALS using namespace ::@NOTF_NAMESPACE_NAME@::@NOTF_LITERALS_NAMESPACE_NAME@

// notf constants =================================================================================================== //

/// Minimum log level for log messages to be compiled.
/// Log messages that are logged with NOTF_LOG_x() where "x" has  a level less than NOTF_LOG_LEVEL are removed before
/// compilation.
///     TRACE = 0
///     DEBUG = 1
///     INFO  = 2
///     WARN  = 3
///     ERROR = 4
///     CRIT  = 5
#define NOTF_LOG_LEVEL @NOTF_LOG_LEVEL@

// notf configuration =============================================================================================== //

NOTF_OPEN_NAMESPACE

namespace config {

/// Version of the notf source code.
inline constexpr auto version_major() noexcept { return @PROJECT_VERSION_MAJOR@; };
inline constexpr auto version_minor() noexcept { return @PROJECT_VERSION_MINOR@; };
inline constexpr auto version_patch() noexcept { return @PROJECT_VERSION_PATCH@; };

/// Human readable notf version string.
inline constexpr const char* version_string() noexcept { return "@NOTF_VERSION_STRING@"; }

/// Name of the compiler used, as determined by CMake.
inline constexpr const char* compiler_name() noexcept { return "@CMAKE_CXX_COMPILER_ID@"; }

/// Useful for debug-switches at compile time.
inline constexpr bool is_debug_build() noexcept
{
#ifdef NOTF_DEBUG
    return true;
#else
    return false;
#endif
}

/// Whether or not a failed assertion will immediately call `std::abort` or just throw an exception.
inline constexpr bool abort_on_assert() noexcept
{
#ifdef NOTF_TEST // never abort during tests
    return false;
#else
    return @NOTF_ABORT_ON_ASSERT@;
#endif
}

/// System endianess
inline constexpr bool is_big_endian() noexcept { return @NOTF_IS_BIG_ENDIAN@; }

/// Seed value used for all hashing at compile time.
/// Although it is highly unlikely to have a hash collision, it is still possible that (for example) two (compile time)
/// property names produce the same hash value. Since this would cause the built to fail, you can manually set this seed
/// value to anything != 0 (the default) and try again. Chances are, you'll get lucky on your second try.
inline constexpr auto constexpr_seed() noexcept { return 0; }

} // namespace config

NOTF_CLOSE_NAMESPACE
