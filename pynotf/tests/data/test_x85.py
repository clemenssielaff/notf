import unittest

from hypothesis import given, example
from hypothesis.strategies import binary, sampled_from

from pynotf.data import Z85
from pynotf.data.z85 import Z85CHARS


########################################################################################################################
# TEST CASE
########################################################################################################################


class TestCase(unittest.TestCase):

    @given(binary())
    @example(b'\x00')
    @example(b'\x00\x00')
    @example(b'\x00\x01')
    @example(b'U')
    def test_random_encode_decode(self, raw_bytes: bytes):
        """
        Z85 encode and decode random binary generated by Hypothesis.
        """
        encoded: bytes = Z85.encode(raw_bytes)
        decoded: bytes = Z85.decode(encoded)
        raw_bytes_padded: bytes = raw_bytes + (b'\x00' * (3 - ((len(raw_bytes) - 1) % 4)))  # pad to a multiple of 4
        self.assertEqual(decoded, raw_bytes_padded)

    @given(sampled_from(Z85CHARS.decode()))
    def test_random_decode_encode(self, z85_string: str):
        """
        Check that decoding works even if the input is not 5-byte aligned.
        """
        z85_bytes: bytes = z85_string.encode()
        decoded: bytes = Z85.decode(z85_bytes)
        encoded: bytes = Z85.encode(decoded)
        z85_bytes_padded: bytes = z85_bytes + (b'0' * (4 - ((len(z85_bytes) - 1) % 5)))  # pad to a multiple of 5
        self.assertEqual(encoded, z85_bytes_padded)

    def test_decoding_errors(self):
        """
        Z85 decoding failure cases.
        """
        with self.assertRaises(Z85.DecodeError):
            Z85.decode(b'no,allowed')
        with self.assertRaises(Z85.DecodeError):
            Z85.decode(b'1cSn%')
