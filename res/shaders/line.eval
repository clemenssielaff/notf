#version 320 es

precision highp float;

layout (quads, fractional_even_spacing) in;

patch in PatchData {
    vec2 ctrl1;
    vec2 ctrl2;
    int type;
} patch_data;

uniform float stroke_width;
uniform mat4 projection;
uniform float aa_width;

out VertexData {
    mediump vec2 position;
    mediump vec2 tex_coord;
} v_out;

const float ZERO    = 0.0f;
const float HALF    = 0.5f;
const float ONE     = 1.0f;
const float TWO     = 2.0f;
const float THREE   = 3.0f;
const float SIX     = 6.0f;

const mat4 BEZIER = mat4(
     ONE,    ZERO,   ZERO,  ZERO,
    -THREE,  THREE,  ZERO,  ZERO,
     THREE, -SIX,    THREE, ZERO,
    -ONE,    THREE, -THREE, ONE);

const mat3 DERIV = mat3(
     THREE,  ZERO, ZERO,
    -SIX,    SIX,  ZERO,
     THREE, -SIX,  THREE);

void main()
{
    vec2 TVEC = vec2(ONE, gl_TessCoord.x);

    #define start (gl_in[0].gl_Position.xy)
    vec2 ctrl1 = patch_data.ctrl1;
    vec2 ctrl2 = patch_data.ctrl2;
    #define end (gl_in[1].gl_Position.xy)

    // the actual line width is always 1 pixel wider, since even a zero-width line has one pixel of antialiasing
    float line_width = max(ZERO, stroke_width - ZERO);

    // tex_coord.x grows along the stroke from start = 0 to end = 1
    v_out.tex_coord.x = gl_TessCoord.x;

    // tex_coord.y is 1 within the stroke and 0 at the very edge (geometric anti-aliasing in the normal)
    v_out.tex_coord.y = aa_width == 0.0 ? 1.0 : ONE - (step(ONE, gl_TessCoord.y) + step(ONE, ONE - gl_TessCoord.y));

    // spline normal vector
    vec2 normal = normalize(mat3x2(ctrl1-start, ctrl2-ctrl1, end-ctrl2) * DERIV * (TVEC.xyy * TVEC.xxy)).yx * vec2(-ONE, ONE);

     // screen space position of the vertex
    v_out.position = (mat4x2(start, ctrl1, ctrl2,end) * BEZIER * (TVEC.xyyy * TVEC.xxyy * TVEC.xxxy)).xy +
            normal *
            (sign(gl_TessCoord.y - HALF) * HALF * (line_width + ((ONE - (v_out.tex_coord.y * TWO)) * aa_width)));

    // clip-space position of the vertex
    gl_Position = projection * vec4(v_out.position, -ONE, ONE);
}
