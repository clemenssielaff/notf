#version 320 es

precision highp float;

layout (quads, fractional_even_spacing) in;

uniform float stroke_width;
uniform mat4 projection;
uniform float aa_width;
uniform vec2 base_vertex;

out VertexData {
    mediump vec2 position;
    mediump vec2 tex_coord;
} v_out;

const float ZERO    = 0.0f;
const float HALF    = 0.5f;
const float ONE     = 1.0f;
const float TWO     = 2.0f;
const float THREE   = 3.0f;
const float SIX     = 6.0f;

void main()
{
    // tex_coord.y is 1 within the stroke and 0 at the very edge (geometric anti-aliasing in the normal)
    v_out.tex_coord.y = aa_width == 0.0 ? 1.0 : ONE - step(0.9, gl_TessCoord.y);

    // This always creates a triangle with zero area :/ but I hope that the GPU is quick to discard such polygons.
    // The alternative would be that I always pass 3 vertices to a patch, which would mean that I always pass an unused
    // vertex for each line segment, which might be slower
    vec2 delta = mix(gl_in[1].gl_Position.xy, gl_in[0].gl_Position.xy, gl_TessCoord.x) - base_vertex;
    v_out.position = fma(vec2(step(HALF, gl_TessCoord.y) * (length(delta) - (sign(v_out.tex_coord.y - HALF) * aa_width))),
                         normalize(delta), base_vertex);


    // clip-space position of the vertex
    gl_Position = projection * vec4(v_out.position, -ONE, ONE);

    v_out.tex_coord.x = gl_TessCoord.x;


}
