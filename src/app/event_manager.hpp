#pragma once

#include <vector>

#include "app/forwards.hpp"

NOTF_OPEN_NAMESPACE

//====================================================================================================================//

/// EventManager accepts "raw" GLFW (and potentially all other) events and turn them into NoTF event objects.
///
/// The EventManager works synchronously, meaning there is a strict temporal ordering of events with regard to each
/// Window handling events. This is because the state of the hierarchy itself determines who is going to end up handling
/// an event and if a later event is handled before an earlier one, then the propagation might not work correctly.
class EventManager {
    friend class Application;
    friend class Window;

    // types ---------------------------------------------------------------------------------------------------------//
private:
    /// Per-window data.
    struct WindowHandler {

        /// Window to forward the events into.
        Window* window;

        /// All events for this handler in order.
        std::vector<EventPtr> events;
    };

    // methods -------------------------------------------------------------------------------------------------------//
public:
    NOTF_NO_COPY_OR_ASSIGN(EventManager)

    /// Constructor.
    EventManager();

    /// Destructor.
    ~EventManager();

private:
    /// Adds a new Window to the manager.
    void add_window(Window& window);

    /// Removes a Window from the manager - all remaining events for the Window are dropped immediately.
    void remove_window(Window& window);

    /// Called by GLFW in case of an error.
    /// @param error    Error ID.
    /// @param message  Error message;
    static void on_error(int error, const char* message);

    /// Called by GLFW when a key is pressed, repeated or released.
    /// @param glfw_window   The GLFWwindow targeted by the event.
    /// @param key           Modified key.
    /// @param scancode      May hold additional information when key is set to KEY_UNKNOWN (platform dependent).
    /// @param action        The action that triggered this callback.
    /// @param modifiers     Modifier key bitmask.
    static void on_token_key(GLFWwindow* glfw_window, int key, int scancode, int action, int modifiers);

    /// Called by GLFW when an unicode code point was generated.
    /// @param glfw_window   The GLFWwindow targeted by the event
    /// @param codepoint     Unicode code point generated by the event as native endian UTF-32.
    /// @param modifiers     Modifier key bitmask.
    static void on_char_input(GLFWwindow* glfw_window, uint codepoint, int modifiers);

    /// Called when the cursor enters or exists the client area of a Window.
    /// @param glfw_window   The GLFWwindow targeted by the event
    /// @param entered       0 => cursor left | !0 => cursor entered
    static void on_cursor_entered(GLFWwindow* glfw_window, int entered);

    /// Called when the user moves the mouse inside a Window.
    /// @param glfw_window   The GLFWwindow targeted by the event.
    /// @param x             X coordinate of the cursor in Window coordinates.
    /// @param y             Y coordinate of the cursor in Window coordinates.
    static void on_cursor_move(GLFWwindow* glfw_window, double x, double y);

    /// Called when the user presses or releases a mouse button Window.
    /// @param glfw_window   The GLFWwindow targeted by the event.
    /// @param button        The mouse button triggering this callback.
    /// @param action        Mouse button action, is either PRESS or RELEASE.
    /// @param modifiers     Modifier key bitmask.
    static void on_mouse_button(GLFWwindow* glfw_window, int button, int action, int modifiers);

    /// Called when the user scrolls inside the Window.
    /// @param glfw_window   The GLFWwindow targeted by the event.
    /// @param x             Horizontal scroll delta in screen coordinates.
    /// @param y             Vertical scroll delta in screen coordinates.
    static void on_scroll(GLFWwindow* glfw_window, double x, double y);

    /// Called by GLFW, if the user requested a window to be closed.
    /// @param glfw_window  GLFW Window to close.
    static void on_window_close(GLFWwindow* glfw_window);

    /// Called when the Window is resize.
    /// @param glfw_window   Resized windwow.
    /// @param width         New width of the Window.
    /// @param height        New height of the Window.
    static void on_window_resize(GLFWwindow* glfw_window, int width, int height);

    // fields --------------------------------------------------------------------------------------------------------//
private:
    /// Relevant data for each Window.
    std::vector<WindowHandler> m_handler;
};

NOTF_CLOSE_NAMESPACE
